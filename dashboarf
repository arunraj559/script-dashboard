<!DOCTYPE html>
<html lang="id">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>VALIDASI KOIN TVTOTO</title>
<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@500;700&display=swap" rel="stylesheet">
<style>
body{font-family:'Orbitron',sans-serif;margin:0;padding:20px;background:radial-gradient(circle at top left,#000 0%,#0a0a0a 40%,#111 100%);color:#00ffcc;display:flex;min-height:100vh;}
.main{flex:1;padding:20px;border-radius:15px;background:rgba(0,0,0,0.6);box-shadow:0 0 25px rgba(0,255,200,0.4),inset 0 0 20px rgba(0,255,200,0.2);}
h1,h2{text-align:center;color:#00ffcc;text-shadow:0 0 12px #00fff2,0 0 24px #00fff2;letter-spacing:2px;}
textarea{width:100%;height:120px;background:rgba(10,10,10,0.8);color:#00ffcc;border:1px solid #00ffcc;border-radius:12px;padding:12px;margin-bottom:15px;resize:vertical;font-size:14px;box-shadow:inset 0 0 15px rgba(0,255,200,0.3);}
button{background:linear-gradient(135deg,#00ffcc,#00b894);color:#111;border:none;padding:10px 20px;margin:5px;border-radius:8px;cursor:pointer;font-weight:bold;letter-spacing:1px;transition:0.3s;box-shadow:0 0 15px #00ffcc;}
button:hover{transform:scale(1.05);box-shadow:0 0 25px #00ffe5,0 0 40px #00ffe5;}
table{width:100%;border-collapse:collapse;margin-top:15px;background:rgba(10,10,10,0.7);border-radius:12px;overflow:hidden;box-shadow:0 0 20px rgba(0,255,200,0.3);}
th,td{border:1px solid #00ffcc;padding:10px;text-align:center;font-size:14px;}
th{background:rgba(0,255,200,0.1);color:#00ffe5;text-shadow:0 0 10px #00fff2;}
tr:hover{background:rgba(0,255,200,0.05);}
.sidebar{width:360px;background:rgba(0,0,0,0.7);border-left:2px solid #00ffcc;padding:20px;margin-left:20px;border-radius:15px;box-shadow:0 0 25px rgba(0,255,200,0.4),inset 0 0 20px rgba(0,255,200,0.2);}
.sidebar h3{text-align:center;color:#00ffe5;text-shadow:0 0 10px #00fff2;margin:15px 0;}
.operator-list{list-style:none;padding:0;margin-top:10px;max-height:260px;overflow:auto;}
.operator-list li{font-weight:bold;padding:10px;margin:8px 0;border-radius:10px;text-align:center;transition:0.25s;letter-spacing:1px;}
.operator-belum{background:rgba(255,77,77,0.8);color:#fff;box-shadow:0 0 15px rgba(255,77,77,0.6);}
.operator-aktif{background:rgba(0,255,200,0.9);color:#111;box-shadow:0 0 20px rgba(0,255,200,0.8);}
.withdraw-op{background:rgba(0,200,255,0.95);color:#111;box-shadow:0 0 18px rgba(0,200,255,0.8);animation:glow 1.4s infinite alternate;}
@keyframes glow{from{box-shadow:0 0 12px rgba(0,200,255,0.5);}to{box-shadow:0 0 28px rgba(0,200,255,1);}}
.small{font-size:12px;color:#aaf;text-align:center;margin-top:6px;}
.search { width:100%; padding:8px 10px; border-radius:8px; margin:8px 0; border:1px solid rgba(0,255,200,0.15); background:rgba(0,0,0,0.6); color:#00ffcc; }
</style>
</head>
<body>
<div class="main">
<h1>VALIDASI KOIN TVTOTO</h1>
<textarea id="dataInput" placeholder="Masukkan data transaksi (paste langsung dari Excel/Sheets; setiap baris satu transaksi)"></textarea><br>
<button onclick="tambahData()">Tambah Data</button>
<button onclick="hapusData()">Hapus Semua Data</button>
<button onclick="hitungJumlahDanTotalTransaksi()">Hitung Jumlah & Total</button>
<button onclick="downloadCSV()">Download CSV</button>
<h2>üìë Hasil Rekap:</h2>
<div id="hasil"></div>
</div>

<div class="sidebar">
<h3>üìå Referensi Operator (Deposit & Withdraw)</h3>
<textarea id="refInput" placeholder="Tempel data operator (kolom deposit & withdraw) di sini..."></textarea>
<button onclick="setReferensi()">Simpan Referensi</button>

<div class="small">Script akan otomatis membaca baris yang berisi kata <strong>Withdraw</strong> sebagai data withdraw (langsung ke rekap withdraw).</div>
<input id="withdrawSearch" class="search" placeholder="Cari operator withdraw..." oninput="filterWithdrawList()" />

<h3>üë§ Status Operator</h3>
<ul id="operatorList" class="operator-list"></ul>
<h3>üè¶ Operator Withdraw (hanya nama)</h3>
<ul id="withdrawList" class="operator-list"></ul>
</div>

<script>
let dataTransaksi = [];   // Deposit
let dataWithdraw = [];    // Withdraw
let daftarOperator = new Set();
let operatorReferensi = {};
let operatorWithdraw = {};

// parsing line: robust terhadap tab, koma, atau spasi ganda (copy-paste Excel)
function tokenizeLine(line){
    line = line.replace(/\u00A0/g,' ').trim();
    if(!line) return [];
    // prefer split by tab
    let tokens = line.split('\t');
    if(tokens.length === 1){
        // maybe comma separated
        tokens = line.split(',');
    }
    if(tokens.length === 1){
        // maybe spaces (multiple spaces) from copy
        tokens = line.split(/\s{2,}/);
    }
    // fallback: split by whitespace
    if(tokens.length === 1){
        tokens = line.split(/\s+/);
    }
    tokens = tokens.map(t => t.replace(/^"|"$/g,'').trim());
    return tokens;
}

function tambahData(){
    const dataInput = document.getElementById('dataInput').value;
    if(!dataInput.trim()){ alert('Tidak ada data untuk ditambahkan.'); return; }
    const dataLines = dataInput.trim().split('\n');

    dataLines.forEach(line=>{
        const tokens = tokenizeLine(line);
        if(!tokens.length) return;

        // cek apakah baris ini mengandung kata 'withdraw' (dimana saja) => anggap Withdraw
        const lower = tokens.map(t => (t||'').toString().toLowerCase());
        const isWithdraw = lower.some(t => t === 'withdraw' || t.includes('withdraw'));

        if(isWithdraw){
            // susun row 12 kolom sesuai header: 
            // [Akun Pemain, Tanggal, Jumlah, Bank Pembayaran, No Rek Pembayar, Nama Rek Pembayar, Bank Penerima, No Rek Penerima, Nama Rek Penerima, Akun Operator, Jenis Operasi, Status]
            const row = new Array(12).fill('');
            for(let i=0;i<Math.min(tokens.length,12);i++){
                row[i] = tokens[i];
            }
            // pastikan kolom jenis operasi berisi "Withdraw"
            if(!row[10] || !/withdraw/i.test(row[10])) row[10] = 'Withdraw';
            dataWithdraw.push(row);

            const operatorName = (row[9]||row[0]||'').toString().trim();
            if(operatorName){
                if(operatorReferensi[operatorName]) operatorReferensi[operatorName].hasWithdraw = true;
                daftarOperator.add(operatorName);
            }
        } else {
            // dianggap deposit (saat tidak ketemu kata Withdraw)
            // buat row 12 kolom juga agar konsisten ketika data berasal dari Excel
            const row = new Array(12).fill('');
            for(let i=0;i<Math.min(tokens.length,12);i++){
                row[i] = tokens[i];
            }
            // jika kolom jumlah (index 2) tidak numeric tapi ada angka di token lain, coba cari angka
            if(!/[\d]/.test((row[2]||'')) ){
                const found = tokens.find(t => /[0-9]/.test(t));
                if(found) row[2] = found;
            }
            dataTransaksi.push(row);
            const operatorName = (row[9]||row[1]||row[0]||'').toString().trim();
            if(operatorName){
                if(operatorReferensi[operatorName]) operatorReferensi[operatorName].status = true;
                daftarOperator.add(operatorName);
            }
        }
    });

    document.getElementById('dataInput').value='';
    updateOperatorList();
    alert('‚úÖ Data berhasil disimpan! (Deposit + Withdraw)');
}

function hapusData(){
    dataTransaksi = [];
    dataWithdraw = [];
    daftarOperator.clear();
    document.getElementById('hasil').innerHTML = '';
    document.getElementById('operatorList').innerHTML = '';
    document.getElementById('withdrawList').innerHTML = '';
    for(const op in operatorReferensi){
        operatorReferensi[op].status = false;
        operatorReferensi[op].hasWithdraw = false;
    }
    operatorWithdraw = {};
    alert('üóë Semua data dihapus!');
}

function hitungJumlahDanTotalTransaksi(){
    const hasilDeposit = {};
    dataTransaksi.forEach(item=>{
        const bankPembayaran = (item[3]||'Unknown').toString() || 'Unknown';
        const jumlah = parseInt((item[2]||'0').toString().replace(/[^0-9\-]/g,''),10) || 0;
        if(!hasilDeposit[bankPembayaran]) hasilDeposit[bankPembayaran] = { total:0, count:0 };
        hasilDeposit[bankPembayaran].total += jumlah;
        hasilDeposit[bankPembayaran].count++;
    });

    const hasilWithdraw = {};
    dataWithdraw.forEach(item=>{
        const bankPenerima = (item[6]||'Unknown').toString() || 'Unknown';
        const jumlah = parseInt((item[2]||'0').toString().replace(/[^0-9\-]/g,''),10) || 0;
        if(!hasilWithdraw[bankPenerima]) hasilWithdraw[bankPenerima] = { total:0, count:0 };
        hasilWithdraw[bankPenerima].total += jumlah;
        hasilWithdraw[bankPenerima].count++;
    });

    // total gabungan (opsional ditampilkan)
    let totalGabungan = 0;
    for(const b in hasilDeposit) totalGabungan += hasilDeposit[b].total;
    for(const b in hasilWithdraw) totalGabungan += hasilWithdraw[b].total;

    let hasilOutput = `
    <h3>üìå Rekap Deposit</h3>
    <table><thead><tr><th>Bank</th><th>Jumlah Transaksi</th><th>Total</th></tr></thead><tbody>`;
    for(const bank in hasilDeposit){
        hasilOutput += `<tr><td>${bank}</td><td>${hasilDeposit[bank].count}</td><td>${hasilDeposit[bank].total.toLocaleString()}</td></tr>`;
    }
    hasilOutput += '</tbody></table>';

    hasilOutput += `
    <h3>üìå Rekap Withdraw</h3>
    <table><thead><tr><th>Bank</th><th>Jumlah Transaksi</th><th>Total</th></tr></thead><tbody>`;
    for(const bank in hasilWithdraw){
        hasilOutput += `<tr><td>${bank}</td><td>${hasilWithdraw[bank].count}</td><td>${hasilWithdraw[bank].total.toLocaleString()}</td></tr>`;
    }
    hasilOutput += '</tbody></table>';

    hasilOutput += `<div style="margin-top:10px;text-align:center;font-weight:bold;">Total Gabungan (Deposit + Withdraw): ${totalGabungan.toLocaleString()}</div>`;

    document.getElementById('hasil').innerHTML = hasilOutput;
}

function downloadCSV(){
    if(!dataTransaksi.length && !dataWithdraw.length){ alert('Tidak ada data transaksi untuk di-download.'); return; }
    let csv = "Akun Pemain,Tanggal,Jumlah,Bank Pembayaran,No Rek Pembayar,Nama Rek Pembayar,Bank Penerima,No Rek Penerima,Nama Rek Penerima,Akun Operator,Jenis Operasi,Status\n";
    [...dataTransaksi, ...dataWithdraw].forEach(row => {
        csv += row.map(v => `"${(v||'').toString().replace(/"/g,'""')}"`).join(",") + "\n";
    });
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'transaksi.csv';
    link.click();
}

function setReferensi(){
    const text = document.getElementById('refInput').value.trim();
    if(!text){ alert('Tidak ada referensi untuk disimpan.'); return; }
    const lines = text.split('\n');
    operatorReferensi = {};
    operatorWithdraw = {};
    lines.forEach((rawLine, idx)=>{
        let line = rawLine.replace(/\u00A0/g,' ').trim();
        if(!line) return;
        if(idx === 0 && /operator|deposit|withdraw|no/i.test(line)) return;

        const tokens = line.split(/\s+/);
        let opIdx = tokens.findIndex(t => /[A-Za-z]/.test(t));
        if(opIdx === -1) opIdx = 0;
        let nameParts = [];
        for(let j=opIdx;j<tokens.length;j++){
            if(/^[0-9\-,.]+$/.test(tokens[j])) break;
            nameParts.push(tokens[j]);
        }
        const nama = nameParts.join(' ').replace(/[^A-Za-z0-9_\- ]/g,'').trim();
        if(!nama) return;

        const numeric = tokens.slice(opIdx + nameParts.length).map(t=>parseInt(t.replace(/[^0-9\-]/g,''),10)||0);
        let depositVal = numeric[0]||0;
        let withdrawVal = numeric[1]||0;

        operatorReferensi[nama] = { status:false, hasWithdraw: withdrawVal>0 };
        if(withdrawVal>0) operatorWithdraw[nama] = withdrawVal;
    });
    updateWithdrawList();
    updateOperatorList();
    alert('‚úÖ Referensi operator berhasil disimpan! Ditemukan: ' + Object.keys(operatorReferensi).length + ' operator.');
}

function updateOperatorList(){
    const list = document.getElementById('operatorList');
    list.innerHTML = '';
    const keys = Object.keys(operatorReferensi).sort((a,b)=>a.localeCompare(b));
    if(!keys.length){
        const li = document.createElement('li');
        li.textContent = '‚Äî Belum ada referensi deposit ‚Äî';
        li.className='operator-belum';
        list.appendChild(li);
        return;
    }
    keys.forEach(op=>{
        const li = document.createElement('li');
        li.textContent = op;
        if(operatorReferensi[op].status) li.className = 'operator-aktif';
        else if(operatorReferensi[op].hasWithdraw) li.className = 'withdraw-op';
        else li.className = 'operator-belum';
        list.appendChild(li);
    });
}

function updateWithdrawList(){
    const list = document.getElementById('withdrawList');
    list.innerHTML = '';
    const names = Object.keys(operatorWithdraw).sort((a,b)=>a.localeCompare(b));
    if(!names.length){
        const li = document.createElement('li');
        li.textContent = '‚Äî Tidak ada operator dengan nominal withdraw ‚Äî';
        li.className='operator-belum';
        list.appendChild(li);
        return;
    }
    names.forEach(name=>{
        const li = document.createElement('li');
        li.textContent = name;
        li.className = 'withdraw-op';
        list.appendChild(li);
    });
    filterWithdrawList();
}

function filterWithdrawList(){
    const q = (document.getElementById('withdrawSearch').value || '').toLowerCase().trim();
    const list = document.getElementById('withdrawList');
    Array.from(list.children).forEach(li=>{
        const txt = li.textContent.toLowerCase();
        li.style.display = q ? (txt.includes(q) ? '' : 'none') : '';
    });
}

updateOperatorList();
updateWithdrawList();
</script>
</body>
</html>
